{"ast":null,"code":"var _jsxFileName = \"/home/workspace/would-you-rather/src/components/Card.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PollCard from \"./PollCard\";\nimport LeaderCard from \"./LeaderCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Card extends Component {\n  render() {\n    const {\n      user,\n      isLeaderShip,\n      isQuestionPage,\n      question,\n      hasAnswered,\n      answer\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"card card_color\",\n      style: {\n        margin: \"25px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"card-header\",\n        children: isLeaderShip ? /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [user.name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 15\n        }, this) : [hasAnswered ? /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [user.name, \" asked \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 19\n        }, this) : /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [user.name, \" asks\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 19\n        }, this)]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"card flex-row card_color col-md-12\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: user.avatarURL,\n          alt: `Avatar of ${user.name}`,\n          className: \"card-img-left avatar_card col-md-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"col-md-8\",\n          children: isLeaderShip ? /*#__PURE__*/_jsxDEV(LeaderCard, {\n            user: user\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(PollCard, {\n            isQuestionPage: isQuestionPage,\n            question: question,\n            hasAnswered: hasAnswered,\n            answer: answer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps({\n  users,\n  questions,\n  authedUser\n}, props) {\n  const id = props.id ? props.id : props.match.params.id;\n  const isLeaderShip = props.isLeaderShip;\n  const isQuestionPage = props.match ? props.match.params.id ? true : false : false;\n  let user = {};\n\n  if (isLeaderShip) {\n    user = props.user;\n    return {\n      user,\n      isLeaderShip,\n      isQuestionPage\n    };\n  } else {\n    const question = questions[id];\n    user = users[question.author];\n    const hasAnswered = Object.keys(users[authedUser].answers).includes(id) ? true : false;\n    return {\n      user,\n      id,\n      isLeaderShip,\n      isQuestionPage,\n      question,\n      hasAnswered,\n      answer: hasAnswered ? users[authedUser].answers[id] : \"\"\n    };\n  }\n}\n\nexport default connect(mapStateToProps)(Card);","map":{"version":3,"sources":["/home/workspace/would-you-rather/src/components/Card.js"],"names":["React","Component","connect","PollCard","LeaderCard","Card","render","user","isLeaderShip","isQuestionPage","question","hasAnswered","answer","props","margin","name","avatarURL","mapStateToProps","users","questions","authedUser","id","match","params","author","Object","keys","answers","includes"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport { connect } from \"react-redux\"\nimport PollCard from \"./PollCard\"\nimport LeaderCard from \"./LeaderCard\"\n\nclass Card extends Component {\n  render() {\n    const {\n      user,\n      isLeaderShip,\n      isQuestionPage,\n      question,\n      hasAnswered,\n      answer,\n    } = this.props\n\n    return (\n        <div class='card card_color' style={{ margin: \"25px\" }}>\n          <div class='card-header'>\n            {isLeaderShip ? (\n              <strong>{user.name} </strong>\n            ) : (\n              [\n                hasAnswered ? (\n                  <strong>{user.name} asked </strong>\n                ) : (\n                  <strong>{user.name} asks</strong>\n                ),\n              ]\n            )}\n          </div>\n          <div class='card flex-row card_color col-md-12'>\n            <img\n              src={user.avatarURL}\n              alt={`Avatar of ${user.name}`}\n              className='card-img-left avatar_card col-md-2'\n            />\n            <div class='col-md-8'>\n              {isLeaderShip ? (\n                <LeaderCard user={user} />\n              ) : (\n                <PollCard\n                  isQuestionPage={isQuestionPage}\n                  question={question}\n                  hasAnswered={hasAnswered}\n                  answer={answer}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n    )\n  }\n}\n\nfunction mapStateToProps({ users, questions, authedUser }, props) {\n  const id = props.id ? props.id : props.match.params.id\n  const isLeaderShip = props.isLeaderShip\n  const isQuestionPage = props.match\n    ? props.match.params.id\n      ? true\n      : false\n    : false\n  let user = {}\n  if (isLeaderShip) {\n    user = props.user\n    return {\n      user,\n      isLeaderShip,\n      isQuestionPage,\n    }\n  } else {\n    const question = questions[id]\n    user = users[question.author]\n    const hasAnswered = Object.keys(users[authedUser].answers).includes(id)\n      ? true\n      : false\n    return {\n      user,\n      id,\n      isLeaderShip,\n      isQuestionPage,\n      question,\n      hasAnswered,\n      answer: hasAnswered ? users[authedUser].answers[id] : \"\",\n    }\n  }\n}\nexport default connect(mapStateToProps)(Card)\n"]},"metadata":{},"sourceType":"module"}