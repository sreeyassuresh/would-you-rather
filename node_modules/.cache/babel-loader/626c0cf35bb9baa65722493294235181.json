{"ast":null,"code":"var _jsxFileName = \"/home/workspace/would-you-rather/src/components/LeaderBoard.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Card from \"./Card.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass LeaderBoard extends Component {\n  render() {\n    const {\n      users\n    } = this.props;\n    const isLeaderShipPage = true;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: users.map(currUser => {\n        return /*#__PURE__*/_jsxDEV(Card, {\n          id: currUser.id,\n          user: currUser,\n          isLeaderShip: isLeaderShipPage\n        }, currUser.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps({\n  users\n}) {\n  const keys = Object.keys(users);\n  let sortedUsers = [];\n  keys.forEach(id => {\n    const user = users[id];\n    const answers = Object.keys(user.answers).length;\n    const questions = user.questions.length;\n    const total = answers + questions;\n    const sortedUser = { ...user,\n      answers,\n      questions,\n      total\n    };\n    sortedUsers.push(sortedUser);\n  });\n\n  if (sortedUsers.length > 0) {\n    sortedUsers = sortedUsers.sort((a, b) => a.total < b.total ? 1 : -1);\n  }\n\n  return {\n    users: sortedUsers\n  };\n}\n\nexport default connect(mapStateToProps)(LeaderBoard);","map":{"version":3,"sources":["/home/workspace/would-you-rather/src/components/LeaderBoard.js"],"names":["React","Component","connect","Card","LeaderBoard","render","users","props","isLeaderShipPage","map","currUser","id","mapStateToProps","keys","Object","sortedUsers","forEach","user","answers","length","questions","total","sortedUser","push","sort","a","b"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;;AAEA,MAAMC,WAAN,SAA0BH,SAA1B,CAAoC;AAClCI,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKC,KAAvB;AACA,UAAMC,gBAAgB,GAAG,IAAzB;AAEA,wBACE;AAAA,gBACGF,KAAK,CAACG,GAAN,CAAWC,QAAD,IAAc;AACvB,4BACE,QAAC,IAAD;AAEE,UAAA,EAAE,EAAEA,QAAQ,CAACC,EAFf;AAGE,UAAA,IAAI,EAAED,QAHR;AAIE,UAAA,YAAY,EAAEF;AAJhB,WACOE,QAAQ,CAACC,EADhB;AAAA;AAAA;AAAA;AAAA,gBADF;AAQD,OATA;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAcD;;AAnBiC;;AAsBpC,SAASC,eAAT,CAAyB;AAAEN,EAAAA;AAAF,CAAzB,EAAoC;AAClC,QAAMO,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYP,KAAZ,CAAb;AACA,MAAIS,WAAW,GAAG,EAAlB;AACAF,EAAAA,IAAI,CAACG,OAAL,CAAcL,EAAD,IAAQ;AACnB,UAAMM,IAAI,GAAGX,KAAK,CAACK,EAAD,CAAlB;AACA,UAAMO,OAAO,GAAGJ,MAAM,CAACD,IAAP,CAAYI,IAAI,CAACC,OAAjB,EAA0BC,MAA1C;AACA,UAAMC,SAAS,GAAGH,IAAI,CAACG,SAAL,CAAeD,MAAjC;AACA,UAAME,KAAK,GAAGH,OAAO,GAAGE,SAAxB;AACA,UAAME,UAAU,GAAG,EACjB,GAAGL,IADc;AAEjBC,MAAAA,OAFiB;AAGjBE,MAAAA,SAHiB;AAIjBC,MAAAA;AAJiB,KAAnB;AAMAN,IAAAA,WAAW,CAACQ,IAAZ,CAAiBD,UAAjB;AACD,GAZD;;AAaA,MAAIP,WAAW,CAACI,MAAZ,GAAqB,CAAzB,EAA4B;AAC1BJ,IAAAA,WAAW,GAAGA,WAAW,CAACS,IAAZ,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACJ,KAAF,GAAUK,CAAC,CAACL,KAAZ,GAAoB,CAApB,GAAwB,CAAC,CAArD,CAAd;AACD;;AACD,SAAO;AACLf,IAAAA,KAAK,EAAES;AADF,GAAP;AAGD;;AACD,eAAeb,OAAO,CAACU,eAAD,CAAP,CAAyBR,WAAzB,CAAf","sourcesContent":["import React, { Component } from \"react\"\nimport { connect } from \"react-redux\"\nimport Card from \"./Card.js\"\n\nclass LeaderBoard extends Component {\n  render() {\n    const { users } = this.props\n    const isLeaderShipPage = true\n\n    return (\n      <div>\n        {users.map((currUser) => {\n          return (\n            <Card\n              key={currUser.id}\n              id={currUser.id}\n              user={currUser}\n              isLeaderShip={isLeaderShipPage}\n            />\n          )\n        })}\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps({ users }) {\n  const keys = Object.keys(users)\n  let sortedUsers = []\n  keys.forEach((id) => {\n    const user = users[id]\n    const answers = Object.keys(user.answers).length\n    const questions = user.questions.length\n    const total = answers + questions\n    const sortedUser = {\n      ...user,\n      answers,\n      questions,\n      total,\n    }\n    sortedUsers.push(sortedUser)\n  })\n  if (sortedUsers.length > 0) {\n    sortedUsers = sortedUsers.sort((a, b) => (a.total < b.total ? 1 : -1))\n  }\n  return {\n    users: sortedUsers,\n  }\n}\nexport default connect(mapStateToProps)(LeaderBoard)\n"]},"metadata":{},"sourceType":"module"}